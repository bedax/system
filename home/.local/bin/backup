#!/usr/bin/env python3

import datetime
import os
import shutil
import sys



def print_usage():
   print("""
      USAGE: {} [OPTIONS] <destinations>

      Paths supplied via stdin will be copied to the destinations,
      under a timestamped subdirectory.

      OPTIONS:
         --keep <amount>
            If copying the files will result in more than this number of
            subdirectories in <destination>, then the excess will be removed
            in lexicographical order. Given the format of the timestamp,
            this means the oldest will be removed.
   """.format(sys.argv[0]))


def invalid_usage():
   print_usage()
   sys.exit(1)


def remove_excess(destination, keep):
   backups = os.listdir(destination)
   backups.sort()
   backups.reverse()

   for i in range(0, len(backups)):
      if (keep > -1) and (i > (keep - 1)):
         backup_path = os.path.join(destination, backups[i])
         print("REMOVING: {}".format(backup_path))
         shutil.rmtree(backup_path)


def copy_path(source, destination):
   destination_path = os.path.join(destination, source.lstrip(os.path.sep))

   if os.path.isdir(source):
      os.makedirs(destination_path, exist_ok=True)
   elif os.path.isfile(source):
      destination_directory = os.path.dirname(destination_path)
      os.makedirs(destination_directory, exist_ok=True)
      shutil.copyfile(source, destination_path)


def copy_paths(paths, destination):
   timestamp = datetime.datetime.now().strftime("%Y-%m-%d-%H-%M-%S")
   backup_path = os.path.join(destination, timestamp)

   for path in paths:
      copy_path(path, backup_path)


def run(destinations, keep):
   paths = [path.rstrip("\n") for path in sys.stdin.readlines()]

   for destination in destinations:
      os.makedirs(destination, exist_ok=True)
      remove_excess(destination, keep)
      copy_paths(paths, destination)


def main():
   keep = -1

   if "--keep" in sys.argv:
      keep_index = sys.argv.index("--keep")
      amount_index = keep_index + 1;

      if len(sys.argv) > amount_index:
         try:
            keep = int(sys.argv.pop(amount_index))
         except ValueError:
            invalid_usage()
         else:
            sys.argv.pop(keep_index)
      else:
         invalid_usage()

   if len(sys.argv) > 1:
      destinations = sys.argv[1:]
      run(destinations, keep)
   else:
      invalid_usage()



if __name__ == "__main__":
   main()
